@startuml
'https://plantuml.com/sequence-diagram
skinparam style strictuml
'autonumber
hide footbox

'title MÃ©thode jouer()
participant ":Main" as main
participant "controlAnt:ControlAnt" as controlAnt
participant "controlAnt.listeFourmis:Ant" as ant
participant "position:Node" as position
participant "voisin:Node" as voisin
participant "destination:Node" as destination
participant "nonVisitedNode:Node[*]" as nonVisitedNode
participant "colony:Queen" as colony
participant "freeVoisins:Node[*]" as freeVoisins
participant "recordsPath:Node[*]" as recordsPath
entity "rand:Random" as random

'Pour le bitset.. prof a dit pas besoin
'participant ":Graphe" as graphe
'participant "bitPlay:BitSet[][]" as bitPlay
'participant "bitPlay[i][j]:BitSet" as bitSet

main -> controlAnt ++ : play(iteration, boolRecord)

    'Si le boolean est a true : enregistrement !
    alt boolRecord
                controlAnt -> controlAnt : recordProcess()
    end

    loop 1,iteration
        loop controlAnt.listeFourmis
        |||
            controlAnt -> ant ++ : move()
            alt Ant instance of Soldier

                ant -> ant  ++ : getPosition()
                return position

                ant -> position ++ : getFreeVoisins()
                    position -> position ++ : getVoisins()
                    return voisins
                    loop voisin : voisins

                    position -> voisin ++ : isObstacle()
                    return isObstacle

                        alt !isObstacle
                            position -> freeVoisins : add(voisin)
                        end
                    end
                return freeVoisins

                ant -> freeVoisins ++ : size()
                return nbFreeVoisins

                alt nbFreeVoisins != 0
                    'nextInt() en Java
                    ant -> random ++ : getInt(freeVoisins.size)
                    return randomInt

                    ant -> ant : setPosition(freeVoisin[randomInt])
                end
                deactivate ant
            end
            |||
            |||
            alt Ant instance of Worker

                            ant -> ant  ++ : getPosition()
                            return position

                            ant -> position ++ : getFreeVoisins()
                                position -> position ++ : getVoisins()
                                return voisins
                                loop voisin : voisins

                                position -> voisin ++ : isObstacle()
                                return isObstacle

                                    alt !isObstacle
                                        position -> freeVoisins : add(voisin)
                                    end
                                end
                            return freeVoisins

                            ant -> freeVoisins ++ : size()
                            return nbFreeVoisins






                            alt nbFreeVoisins != 0

                                ant -> ant ++ : getNonVisitedNode(freeVoisins)
                                '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                return nonVisitedNode

                                ant -> nonVisitedNode ++ : size()
                                return nbNonVisitedNode

                                alt nbNonVisitedNode == 0
                                    'nextInt() en Java
                                    ant -> random ++ : getInt(freeVoisins.size)
                                    return randomInt

                                    ant -> freeVoisins ++ : get(randomInt)
                                    return destination

                                    ant -> ant : setPosition(destination)

                                    ant -> destination ++ : getFood()
                                    return nbFood

                                    alt nbFood > 0
                                        ant -> ant ++ : collect()
                                            ant -> ant ++ : getFoodCollected()
                                            return foodCollected

                                            alt foodCollected != 0
                                                ant -> ant ++ : getColony()
                                                return colony
                                                ant -> colony ++ : getCollectCapacity()
                                                return collectCapacity

                                                alt nbFood > collectCapacity
                                                    ant -> ant : setFoodCollected(nbFood)
                                                    ant -> destination : setFood(0)
                                                else
                                                    ant -> ant : setFoodCollected(collectCapacity)
                                                    ant -> destination : setFood(nbFood - collectCapacity)
                                                end
                                            end
                                        deactivate ant
                                        ant -> ant : setIsBacktracking(true)
                                    'fin nbFood >0
                                    end

                                else

                                end


                            end


                            deactivate ant
                        end
        end

        alt boolRecord
            controlAnt -> controlAnt : recordProcess()
        end
    end
|||
    'controlFourmi -> graphe ++ : getHeight
    'return height
    'controlFourmi -> graphe ++ : getWidth
    'return width

    'create bitPlay
    'controlFourmi -->> bitPlay : instanciate(height, width)
        'loop height
            'loop width
                'create bitSet
                'controlFourmi -->> bitSet : instanciate(7)

                'controlFourmi -> graphe ++ : getNoeud(height,width)
                'return noeud
                'alt noeud.getNoeudState == STATE.ANTHILL
                    'controlFourmi -> bitSet : set(0,true)
                'end
                'alt noeud.getNoeudState == STATE.ANTHILL
                    'controlFourmi -> bitSet : set(0,true)
                'end
            'end
            'return bitPlay
        'end

deactivate controlAnt



@enduml