@startuml
'https://plantuml.com/sequence-diagram
skinparam style strictuml
'autonumber
hide footbox

'title MÃ©thode jouer()
participant ":Main" as main
participant "controlAnt:ControlAnt" as controlAnt
participant "controlAnt.listeFourmis:Ant" as ant
participant "position:Node" as position
participant "voisin:Node" as voisin
participant "destination:Node" as destination
participant "backNode:Node" as backNode
participant "nonVisitedNode:Node[*]" as nonVisitedNode
participant "freeVoisins:Node[*]" as freeVoisins
participant "recordsPath:Node[*]" as recordsPath
participant "mostFoodNode:Node" as mostFoodNode
participant "Pheromone:Pheromone" as pheromone
entity "rand:Random" as random
entity "Collections" as collections

'Pour le bitset.. prof a dit pas besoin
'participant ":Graphe" as graphe
'participant "bitPlay:BitSet[][]" as bitPlay
'participant "bitPlay[i][j]:BitSet" as bitSet

main -> controlAnt ++ : play(iteration, boolRecord)

    'Si le boolean est a true : enregistrement !
    alt boolRecord
                controlAnt -> controlAnt : recordProcess()
    end

    loop 1,iteration
        loop controlAnt.listeFourmis
        |||
            controlAnt -> ant ++ : move()
            alt Ant instance of Soldier

                ant -> ant  ++ : getPosition()
                return position

                ant -> position ++ : getFreeVoisins()
                    position -> position ++ : getVoisins()
                    return voisins
                    loop voisin : voisins

                    position -> voisin ++ : isObstacle()
                    return isObstacle

                        alt !isObstacle
                            position -> freeVoisins : add(voisin)
                        end
                    end
                return freeVoisins

                ant -> freeVoisins ++ : size()
                return nbFreeVoisins

                alt nbFreeVoisins != 0
                    'nextInt() en Java
                    ant -> freeVoisins ++: size()
                    return nbFreeVoisinsSize
                    ant -> random ++ : getInt(nbFreeVoisinsSize)
                    return randomInt

                    ant -> freeVoisins ++ : get(randomInt)
                    return randomNode
                end

            |||
            else Ant instance of Worker
            |||
                            ant -> ant  ++ : getPosition()
                            return position

                            ant -> position ++ : getFreeVoisins()
                                position -> position ++ : getVoisins()
                                return voisins
                                loop voisin : voisins

                                position -> voisin ++ : isObstacle()
                                return isObstacle

                                    alt !isObstacle
                                        position -> freeVoisins : add(voisin)
                                    end
                                end
                            return freeVoisins

                            ant -> freeVoisins ++ : size()
                            return nbFreeVoisins






                            alt nbFreeVoisins != 0

                                ant -> ant ++ : getNonVisitedNode(freeVoisins)
                                '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                return nonVisitedNode

                                ant -> nonVisitedNode ++ : size()
                                return nbNonVisitedNode

                                alt nbNonVisitedNode == 0
                                    'nextInt() en Java
                                    ant -> freeVoisins ++: size()
                                    return nbFreeVoisinsSize
                                    ant -> random ++ : getInt(nbFreeVoisinsSize)
                                    return randomInt

                                    ant -> freeVoisins ++ : get(randomInt)
                                    return destination

                                    ant -> ant : setPosition(destination)

                                    ant -> destination ++ : getFood()
                                    return nbFood

                                    alt nbFood > 0
                                        ref over ant : Execution de Fourmis_DS_Collect
                                        ant -> ant : setIsBacktracking(true)
                                    'fin nbFood >0
                                    end
                                    ant -> ant : addToRecordsPath(direction)

                                |||
                                else
                                    ant -> collections : shuffle(nonVisitedNode)
                                    ant -> nonVisitedNode ++ : getMostFoodNode()
                                    return mostFoodNode
                                    ant -> mostFoodNode ++ : getFood()
                                    return mostFood

                                    alt mostFood != 0
                                        ant -> ant : setPosition(mostFoodNode)
                                        ref over ant : Execution de Fourmis_DS_Collect
                                        ant -> ant : setIsBacktracking(true)
                                        ant -> ant : addToRecordsPath(mostFoodNode)
                                    else
                                    'Fin mostFood != 0
                                    'C'est a dire qu'il n'y a aucun noeud
                                        ant -> collections : sort(nonVisitedNode)
                                        ant -> ant ++ : getIndexAlgortihme(nonVisitedNode))
                                        return index
                                        ant -> nonVisitedNode ++ : get(index)
                                        return destination
                                        ant -> ant : setPosition(destination)
                                        ant -> destination ++: getFood()
                                        return nbFood
                                        ant -> ant : addToRecordsPath(destination)
                                    end
                                end

                            'Lorsque l'ouvriÃ¨re a de la nourriture
                            else
                                ant -> recordsPath ++: size()
                                return recordsSize
                                ant -> recordsPath ++ : get(recordsSize-1)
                                return backNode
                                ant -> backNode ++ : getNodeStade()
                                return backNodeState
                                alt backNodeState == State.Obstacle
                                    ant -> ant : setIsBacktracking(false)
                                end

                                alt isBacktracking
                                    ant -> ant : setPosition(backNode)
                                    ant -> backNode ++ : getFood()
                                    return nbBackFood
                                    alt nbBackFood == 0
                                        create pheromone
                                        ant -->> pheromone : this()
                                        ant -> backNode : addPheromone(Pheromone)
                                    end
                                    ant -> recordsPath : remove(recordsSize-1)

                                    alt backNodeState == State.Anthill
                                        ant -> ant : setFoodCollected(0)
                                        ant -> ant : addToRecordsPath(backNode)
                                    end
                                else
                                    ant -> recordsPath : clear()
                                    ant -> ant ++: getFreeVoisins()
                                    return freeVoisins
                                    ant -> freeVoisins ++ : size()
                                    return nbFreeVoisins

                                    ant -> ant ++ : getNonVisitedNode()
                                    return nonVisitedNode

                                    ant -> nonVisitedNode ++ : size()
                                    return nbNonVisitedNode



                                    alt nbNonVisitedNode == 0
                                        ant -> freeVoisins ++: size()
                                        return nbFreeVoisinsSize
                                        ant -> random ++ : getInt(nbFreeVoisinsSize)
                                        return randomInt
                                        ant -> freeVoisins ++ : get(randomInt)
                                        return randomNode
                                    else

                                    end
                                end
                            end


            deactivate ant
            end
        end

        alt boolRecord
            controlAnt -> controlAnt : recordProcess()
        end
    end
|||
    'controlFourmi -> graphe ++ : getHeight
    'return height
    'controlFourmi -> graphe ++ : getWidth
    'return width

    'create bitPlay
    'controlFourmi -->> bitPlay : instanciate(height, width)
        'loop height
            'loop width
                'create bitSet
                'controlFourmi -->> bitSet : instanciate(7)

                'controlFourmi -> graphe ++ : getNoeud(height,width)
                'return noeud
                'alt noeud.getNoeudState == STATE.ANTHILL
                    'controlFourmi -> bitSet : set(0,true)
                'end
                'alt noeud.getNoeudState == STATE.ANTHILL
                    'controlFourmi -> bitSet : set(0,true)
                'end
            'end
            'return bitPlay
        'end

deactivate controlAnt



@enduml