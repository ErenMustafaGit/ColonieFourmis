@startuml
'https://plantuml.com/sequence-diagram
allow_mixing
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam circledCharacterRadius 0
skinparam circledCharacterFontSize 0
skinparam classFontStyle Bold
'autonumber
hide enum methods

'Controleur
interface AntFacadeController <<interface>> {
    +setParameters( evaporationParam:Integer, foodParam:Integer, pheromoneParam:Integer )
    +createColony(row:Integer,column:Integer)
    +createGrid(width:Integer, height:Integer)
    +putObstacle(row:Integer, column:Integer)
    +putFood( row:Integer, column:Integer, quantity:Integer);
    +createWorkers( amount:Integer )
    +createSoldiers(amount:Integer)
    +setAntFile(antLogFile:String);
    +play(duration:Integer,record:boolean):BitSet[][]
}


abstract class Node <<abstract>>{
    #food:Integer
    +Node()
    +getNoeudState():State
    +setNoeudState(State:State)
    +addNoeudVoisin(noeud:Noeud)
    +getVoisins():Node[*]
    +getFreeVoisins():Node[*]
    +setFood(amount:Integer)
    +getFood():Integer
    +addPheromone(pheromone:Pheromone)
    +getPheromones():Pheromone[*]
    +updatePheromone()
    '+compareTo(node:Node)<<override>>
}

class Node2D extends Node{
   +Node2D()
}


enum State <<enum>> {
    FREE
    OBSTACLE
    ANTHILL
}

'class Food{
'    -amount:Integer
'    +Food()
'}
class Pheromone{
    +Pheromone(quantity:Integer, colony:AntHill)
    +quantity:Integer
    +getQuantity():Integer
    +setQuantity(quantity:Amount)
}


abstract Ant <<abstract>> {
    +Ant(node:Node)
    +Ant(node:Node, colony:AntHill)
    +getPosition():Node
    +setPosition(position:Noeud)
    {abstract} +move()
}
class AntHill{
    -pheromoneQuantity:Integer
    -collectCapacity:Integer
    +AntHill(position:Node)
    +setCollectCapacity(capacity:Integer)
    +setPheromoneQuantity(pheromoneQuantity:Integer)
    +getCollectCapacity():Integer
    +getPheromoneQuantity():Integer
    +createSoldiers(amount:Integer)
    +createWorkers((amount:Integer)
}
class Soldier{
    +Soldier(position:Node, colony:Hill)
    +move() <<override>>
}

class Worker {
    -foodCollected:Integer
    -isBacktracking:Boolean
    +Worker(position:Node , colony:AntHill)
    +getNonVistedNode(freeeVoisins:Node[*]):Node[*]
    +move() <<override>>
    +collect()
    +putPheromone()
    +getFoodCollected():Integer
    +getIndexAlgorithme(nodesPheromone:Node[*]):Integer
    +addRecordsPath(addNode:Node)
    +setFoodCollected(foodCollected:Integer)
}


class ControlAnt implements AntFacadeController{
    -graph:Graph
    -collectCapacity:Integer
    -pheromoneQuantity:Integer
    -evaporationQuantity:Integer
    -antLogFile:String
    +getAntList():Ant[*]
    +getGraph():Graph
}

class SaveIteration {
    -antLogFile:String
    -dataAnt:String[*]
    -antList:Ant[*]
    +SaveIteration(dataAnt:String[*], antList:Ant[*])
    +recordProcess(iteration:Integer)
    +setSaveLocation(location:String)
    +writeProcess()
}


class Graph{
 -width:Integer
 -height:Integer
 +Graph(witdh:Integer, height:Integer)
 +getNode(row:Integer, column:Integer):Node
 +putObstacle(row:Integer, column:Integer)
 +getNodeList():Node[*]
 +getWidth():Integer
 +getHeight():Integer
}



SaveIteration "-saveIteration\n1" <--* ControlAnt : sauvegarde (.csv) >

Soldier --|> Ant
Worker --|> Ant
AntHill --|> Ant

Worker --> Node

ControlAnt "-graphe\n1 " *-l-> Graph
ControlAnt  *-r-> "-antList\n0..*" Ant


Graph *--> "-nodeList \n0..*" Node2D : composé de >

'historique = liste de noeud déjà passé par la fourmi
'"-position 1\n-historique 0..*"
Ant o---> "-position\n1" Node  : est sur un >
AntHill *--> "-position\n1" Node  : est sur un >
Node o-> " #voisins\n0..*"  Node  : est voisin de >

Node -l-> " #state\n1" State : <<uses>> >

'Ant *-> "-colony\n1" AntHill : provient de >
Pheromone *-u-> "-colony\n1" AntHill : provient de >
Node o-l-> " #pheromones\n..*" Pheromone : contient >


@enduml