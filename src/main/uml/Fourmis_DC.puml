@startuml
'https://plantuml.com/sequence-diagram
allow_mixing
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam circledCharacterRadius 0
skinparam circledCharacterFontSize 0
skinparam classFontStyle Bold
'autonumber
hide enum methods

'Controleur
interface AntFacadeController <<interface>> {
    '+setParameters( evaporationParam:Integer, foodParam:Integer, pheromoneParam:Integer )
    +createColony(row:Integer,column:Integer)
    +createGrid(width:Integer, height:Integer)
    +putObstacle(row:Integer, column:Integer)
    '+putFood( row:Integer, column:Integer, quantity:Integer);
    '+createWorkers( amount:Integer )
    +createSoldiers(amount:Integer)
    '+setAntFile(antLogFile:String);
    +play(duration:Integer,record:boolean):BitSet[][]
}

class Noeud {
    +Noeud()
    +getNoeudState():STATE
    +setNoeudState(State:STATE)
    +addNoeudVoisin(noeud:Noeud)
    +getVoisins():Noeud[*]
    +getFreeVoisins():Noeud[*]
}
enum STATE <<enum>> {
    FREE
    OBSTACLE
    ANTHILL
}


abstract Fourmis <<abstract>> {
    +getPosition():Noeud
    +setPosition(position:Noeud)
    {abstract} +move()
}
class Reine{
    +Reine(:Noeud)
    +move() <<override>>
    +createSoldiers(amount:Integer)

}
class Soldat{
    +Soldat(:Noeud)
    +move() <<override>>
}


class ControlFourmis implements AntFacadeController{
}


class Graphe{
 -width:Integer
 -height:Integer
 +Graphe(witdh:Integer, height:Integer)
 +getNoeud(row:Integer, column:Integer):Noeud
 +putObstacle(row:Integer, column:Integer)
 +createColony(row:Integer,column:Integer)
 +getNoeudList()
 +getWidth()
 +getHeight()
}


Soldat --|> Fourmis
Reine -l-|> Fourmis

ControlFourmis "-graphe\n1 " *-l-> Graphe
ControlFourmis  *--> "-listeFourmis\n1..*" Fourmis

Graphe *-r-> "-noeudList \n0..n" Noeud : composé de >
'historique = liste de noeud déjà passé par la fourmi
'"-position 1\n-historique 0..*"
Fourmis *---> "-position\n1" Noeud  : est sur un >
Noeud o-> "-voisins\n0..*"  Noeud  : est voisin de >

Noeud -l-> STATE : <<uses>>

@enduml