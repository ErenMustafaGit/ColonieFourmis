@startuml
'https://plantuml.com/sequence-diagram
allow_mixing
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam circledCharacterRadius 0
skinparam circledCharacterFontSize 0
skinparam classFontStyle Bold
'autonumber
hide enum methods

'Controleur
interface AntFacadeController <<interface>> {
    +setParameters( evaporationParam:Integer, foodParam:Integer, pheromoneParam:Integer )
    +createColony(row:Integer,column:Integer)
    +createGrid(width:Integer, height:Integer)
    +putObstacle(row:Integer, column:Integer)
    +putFood( row:Integer, column:Integer, quantity:Integer);
    +createWorkers( amount:Integer )
    +createSoldiers(amount:Integer)
    +setAntFile(antLogFile:String);
    +play(duration:Integer,record:boolean):BitSet[][]
}

class Node{
    -food:Integer
    +Node()
    +getNoeudState():STATE
    +setNoeudState(State:STATE)
    +addNoeudVoisin(noeud:Noeud)
    +getVoisins():Node[*]
    +getFreeVoisins():Node[*]
    +getPheromones():Pheromone[*]
    +setFood(amount:Integer)
    +compareTo(node:Node)<<override>>
}

interface Comparable <<interface>>{

}

enum STATE <<enum>> {
    FREE
    OBSTACLE
    ANTHILL
}

'class Food{
'    -amount:Integer
'    +Food()
'}
class Pheromone{
    +quantity:Integer
    +getQuantity():Integer
}


abstract Ant <<abstract>> {
    +getPosition():Node
    +setPosition(position:Noeud)
    {abstract} +move()
}
class AntHill{
    -collectCapacity:Integer
    +AntHill(position:Noeud, collectCapacity:Integer)
    +getPosition():Node
    +createSoldiers(amount:Integer)
    +setCollectCapacity(:Integer)
    +getCollectCapacity():Integer
}
class Soldier{
    +Soldier(position:Node, colony:AntHill)
    +move() <<override>>
}

class Worker {
    +Worker(position:Node , colony:AntHill)
    +move() <<override>>
    +putPheromone()
    +collect()
}


class ControlAnt implements AntFacadeController{
    -collectCapacity:Integer
}


class Graph{
 -width:Integer
 -height:Integer
 +Graph(witdh:Integer, height:Integer)
 +getNoeud(row:Integer, column:Integer):Node
 +putObstacle(row:Integer, column:Integer)
 +createColony(row:Integer,column:Integer)
 +getNoeudList():Node[*]
 +getWidth():Integer
 +getHeight():Integer
}


Soldier ---|> Ant
Worker ---|> Ant
AntHill --|> Ant

ControlAnt "-graphe\n1 " *-l-> Graph
ControlAnt  *-r-> "-antList\n0..*" Ant
ControlAnt  *--> "-antHillList\n0..*" AntHill

Graph *-r-> "-nodeList \n0..*" Node : composé de >

'historique = liste de noeud déjà passé par la fourmi
'"-position 1\n-historique 0..*"
Ant o--> "-position\n1" Node  : est sur un >
AntHill *---> "-position\n1" Node  : est sur un >
Node o-> "-voisins\n0..*"  Node  : est voisin de >

Node -l-> STATE : <<uses>>

'Ant *-> "-colony\n1" AntHill : provient de >
Pheromone *-u-> "-colony\n1" AntHill : provient de >
Node o-u-> "-pheromones\n..*" Pheromone : contient >


@enduml